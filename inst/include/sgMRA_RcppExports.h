// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#ifndef RCPP_sgMRA_RCPPEXPORTS_H_GEN_
#define RCPP_sgMRA_RCPPEXPORTS_H_GEN_

#include <RcppArmadillo.h>
#include <Rcpp.h>

namespace sgMRA {

    using namespace Rcpp;

    namespace {
        void validateSignature(const char* sig) {
            Rcpp::Function require = Rcpp::Environment::base_env()["require"];
            require("sgMRA", Rcpp::Named("quietly") = true);
            typedef int(*Ptr_validate)(const char*);
            static Ptr_validate p_validate = (Ptr_validate)
                R_GetCCallable("sgMRA", "_sgMRA_RcppExport_validate");
            if (!p_validate(sig)) {
                throw Rcpp::function_not_exported(
                    "C++ function with signature '" + std::string(sig) + "' not found in sgMRA");
            }
        }
    }

    inline Rcpp::List distance_near_with_ddist_cpp(arma::mat& locs, arma::mat& locs_grid, double& radius, const int& n_neighbors = 68) {
        typedef SEXP(*Ptr_distance_near_with_ddist_cpp)(SEXP,SEXP,SEXP,SEXP);
        static Ptr_distance_near_with_ddist_cpp p_distance_near_with_ddist_cpp = NULL;
        if (p_distance_near_with_ddist_cpp == NULL) {
            validateSignature("Rcpp::List(*distance_near_with_ddist_cpp)(arma::mat&,arma::mat&,double&,const int&)");
            p_distance_near_with_ddist_cpp = (Ptr_distance_near_with_ddist_cpp)R_GetCCallable("sgMRA", "_sgMRA_distance_near_with_ddist_cpp");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_distance_near_with_ddist_cpp(Shield<SEXP>(Rcpp::wrap(locs)), Shield<SEXP>(Rcpp::wrap(locs_grid)), Shield<SEXP>(Rcpp::wrap(radius)), Shield<SEXP>(Rcpp::wrap(n_neighbors)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::List >(rcpp_result_gen);
    }

    inline arma::mat distance_near_row_cpp(const double& i, const arma::rowvec& locs, const arma::mat& locs_grid, const double& radius, const bool& byrow = true) {
        typedef SEXP(*Ptr_distance_near_row_cpp)(SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_distance_near_row_cpp p_distance_near_row_cpp = NULL;
        if (p_distance_near_row_cpp == NULL) {
            validateSignature("arma::mat(*distance_near_row_cpp)(const double&,const arma::rowvec&,const arma::mat&,const double&,const bool&)");
            p_distance_near_row_cpp = (Ptr_distance_near_row_cpp)R_GetCCallable("sgMRA", "_sgMRA_distance_near_row_cpp");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_distance_near_row_cpp(Shield<SEXP>(Rcpp::wrap(i)), Shield<SEXP>(Rcpp::wrap(locs)), Shield<SEXP>(Rcpp::wrap(locs_grid)), Shield<SEXP>(Rcpp::wrap(radius)), Shield<SEXP>(Rcpp::wrap(byrow)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<arma::mat >(rcpp_result_gen);
    }

    inline arma::mat distance_near_loop_cpp(const arma::mat& locs, const arma::mat& locs_grid, const double& radius, const int& n_neighbors = 86, const bool& byrow = true) {
        typedef SEXP(*Ptr_distance_near_loop_cpp)(SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_distance_near_loop_cpp p_distance_near_loop_cpp = NULL;
        if (p_distance_near_loop_cpp == NULL) {
            validateSignature("arma::mat(*distance_near_loop_cpp)(const arma::mat&,const arma::mat&,const double&,const int&,const bool&)");
            p_distance_near_loop_cpp = (Ptr_distance_near_loop_cpp)R_GetCCallable("sgMRA", "_sgMRA_distance_near_loop_cpp");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_distance_near_loop_cpp(Shield<SEXP>(Rcpp::wrap(locs)), Shield<SEXP>(Rcpp::wrap(locs_grid)), Shield<SEXP>(Rcpp::wrap(radius)), Shield<SEXP>(Rcpp::wrap(n_neighbors)), Shield<SEXP>(Rcpp::wrap(byrow)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<arma::mat >(rcpp_result_gen);
    }

    inline arma::field<arma::mat> distance_near_chunk_cpp(const arma::mat& locs, const arma::mat& locs_grid, const double& radius, const int& n_neighbors = 86, const bool& byrow = true, const bool& joint_index = true, Rcpp::Nullable<int> nchunks = R_NilValue, const int& ncores = 1) {
        typedef SEXP(*Ptr_distance_near_chunk_cpp)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_distance_near_chunk_cpp p_distance_near_chunk_cpp = NULL;
        if (p_distance_near_chunk_cpp == NULL) {
            validateSignature("arma::field<arma::mat>(*distance_near_chunk_cpp)(const arma::mat&,const arma::mat&,const double&,const int&,const bool&,const bool&,Rcpp::Nullable<int>,const int&)");
            p_distance_near_chunk_cpp = (Ptr_distance_near_chunk_cpp)R_GetCCallable("sgMRA", "_sgMRA_distance_near_chunk_cpp");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_distance_near_chunk_cpp(Shield<SEXP>(Rcpp::wrap(locs)), Shield<SEXP>(Rcpp::wrap(locs_grid)), Shield<SEXP>(Rcpp::wrap(radius)), Shield<SEXP>(Rcpp::wrap(n_neighbors)), Shield<SEXP>(Rcpp::wrap(byrow)), Shield<SEXP>(Rcpp::wrap(joint_index)), Shield<SEXP>(Rcpp::wrap(nchunks)), Shield<SEXP>(Rcpp::wrap(ncores)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<arma::field<arma::mat> >(rcpp_result_gen);
    }

}

#endif // RCPP_sgMRA_RCPPEXPORTS_H_GEN_
